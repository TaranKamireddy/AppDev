Index: ../Lab07/app/src/main/res/xml/data_extraction_rules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/app/src/main/res/xml/data_extraction_rules.xml b/../Lab07/app/src/main/res/xml/data_extraction_rules.xml
new file mode 100644
--- /dev/null	(date 1697475332585)
+++ b/../Lab07/app/src/main/res/xml/data_extraction_rules.xml	(date 1697475332585)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?><!--
+   Sample data extraction rules file; uncomment and customize as necessary.
+   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
+   for details.
+-->
+<data-extraction-rules>
+    <cloud-backup>
+        <!-- TODO: Use <include> and <exclude> to control what is backed up.
+        <include .../>
+        <exclude .../>
+        -->
+    </cloud-backup>
+    <!--
+    <device-transfer>
+        <include .../>
+        <exclude .../>
+    </device-transfer>
+    -->
+</data-extraction-rules>
\ No newline at end of file
Index: ../Lab07/app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/app/src/main/res/values/strings.xml b/../Lab07/app/src/main/res/values/strings.xml
new file mode 100644
--- /dev/null	(date 1697730979919)
+++ b/../Lab07/app/src/main/res/values/strings.xml	(date 1697730979919)
@@ -0,0 +1,8 @@
+<resources>
+    <string name="app_name">Fragment Example Dynamic</string>
+    <string name="greeting">Hello TJHSST</string>
+    <string name="button_click">Click Me</string>
+    <string name="greeting2">I\'m home!!!</string>\
+    <string name="count">Count: %1$d</string>
+    <string name="clicked_message">I\'ve been clicked</string>
+</resources>
\ No newline at end of file
Index: ../Lab07/app/src/main/res/values/themes.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/app/src/main/res/values/themes.xml b/../Lab07/app/src/main/res/values/themes.xml
new file mode 100644
--- /dev/null	(date 1697475332523)
+++ b/../Lab07/app/src/main/res/values/themes.xml	(date 1697475332523)
@@ -0,0 +1,9 @@
+<resources xmlns:tools="http://schemas.android.com/tools">
+    <!-- Base application theme. -->
+    <style name="Base.Theme.Lab07" parent="Theme.Material3.DayNight.NoActionBar">
+        <!-- Customize your light theme here. -->
+        <!-- <item name="colorPrimary">@color/my_light_primary</item> -->
+    </style>
+
+    <style name="Theme.Lab07" parent="Base.Theme.Lab07" />
+</resources>
\ No newline at end of file
Index: ../Lab07/app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/app/src/main/AndroidManifest.xml b/../Lab07/app/src/main/AndroidManifest.xml
new file mode 100644
--- /dev/null	(date 1697475332857)
+++ b/../Lab07/app/src/main/AndroidManifest.xml	(date 1697475332857)
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools">
+
+    <application
+        android:allowBackup="true"
+        android:dataExtractionRules="@xml/data_extraction_rules"
+        android:fullBackupContent="@xml/backup_rules"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:roundIcon="@mipmap/ic_launcher_round"
+        android:supportsRtl="true"
+        android:theme="@style/Theme.Lab07"
+        tools:targetApi="31">
+        <activity
+            android:name=".MainActivity"
+            android:exported="true">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+    </application>
+
+</manifest>
\ No newline at end of file
Index: ../Lab07/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/build.gradle.kts b/../Lab07/build.gradle.kts
new file mode 100644
--- /dev/null	(date 1697475331334)
+++ b/../Lab07/build.gradle.kts	(date 1697475331334)
@@ -0,0 +1,4 @@
+// Top-level build file where you can add configuration options common to all sub-projects/modules.
+plugins {
+    id("com.android.application") version "8.1.1" apply false
+}
\ No newline at end of file
Index: ../Lab07/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml b/../Lab07/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
new file mode 100644
--- /dev/null	(date 1697475331959)
+++ b/../Lab07/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml	(date 1697475331959)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
\ No newline at end of file
Index: ../Lab07/app/src/main/res/values/colors.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/app/src/main/res/values/colors.xml b/../Lab07/app/src/main/res/values/colors.xml
new file mode 100644
--- /dev/null	(date 1698943820708)
+++ b/../Lab07/app/src/main/res/values/colors.xml	(date 1698943820708)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="purple_200">#FFBB86FC</color>
+    <color name="purple_500">#FF6200EE</color>
+    <color name="purple_700">#FF3700B3</color>
+    <color name="teal_200">#FF03DAC5</color>
+    <color name="teal_700">#FF018786</color>
+    <color name="black">#FF000000</color>
+    <color name="white">#FFFFFFFF</color>
+    <color name="gray">#F1F1F1</color>
+</resources>
\ No newline at end of file
Index: ../Lab07/app/src/main/res/animator/slide_down.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/app/src/main/res/animator/slide_down.xml b/../Lab07/app/src/main/res/animator/slide_down.xml
new file mode 100644
--- /dev/null	(date 1697730912238)
+++ b/../Lab07/app/src/main/res/animator/slide_down.xml	(date 1697730912238)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<objectAnimator
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:interpolator="@android:anim/accelerate_decelerate_interpolator"
+    android:propertyName="translationY"
+    android:valueType="floatType"
+    android:valueFrom="0"
+    android:valueTo="1280"
+    android:duration="@android:integer/config_mediumAnimTime"/>
\ No newline at end of file
Index: ../Lab07/app/src/test/java/com/example/lab07/ExampleUnitTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/app/src/test/java/com/example/lab07/ExampleUnitTest.java b/../Lab07/app/src/test/java/com/example/lab07/ExampleUnitTest.java
new file mode 100644
--- /dev/null	(date 1697475331771)
+++ b/../Lab07/app/src/test/java/com/example/lab07/ExampleUnitTest.java	(date 1697475331771)
@@ -0,0 +1,17 @@
+package com.example.lab07;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * Example local unit test, which will execute on the development machine (host).
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+public class ExampleUnitTest {
+    @Test
+    public void addition_isCorrect() {
+        assertEquals(4, 2 + 2);
+    }
+}
\ No newline at end of file
Index: ../Lab10/app/src/main/java/com/example/lab10/FlashlightCone.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab10/app/src/main/java/com/example/lab10/FlashlightCone.java b/../Lab10/app/src/main/java/com/example/lab10/FlashlightCone.java
new file mode 100644
--- /dev/null	(date 1704737506523)
+++ b/../Lab10/app/src/main/java/com/example/lab10/FlashlightCone.java	(date 1704737506523)
@@ -0,0 +1,31 @@
+package com.example.lab10;
+
+public class FlashlightCone {
+
+    private int mX;
+    private int mY;
+    private int mRadius;
+
+    public FlashlightCone(int viewWidth, int viewHeight) {
+        mX = viewWidth / 2;
+        mY = viewHeight / 2;
+        mRadius = ((viewWidth <= viewHeight) ? mX / 5 : mY / 5);
+    }
+
+    public void update(int newX, int newY) {
+        mX = newX;
+        mY = newY;
+    }
+
+    public int getX() {
+        return mX;
+    }
+
+    public int getY() {
+        return mY;
+    }
+
+    public int getRadius() {
+        return mRadius;
+    }
+}
\ No newline at end of file
Index: ../Lab07/app/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/app/.gitignore b/../Lab07/app/.gitignore
new file mode 100644
--- /dev/null	(date 1697475330857)
+++ b/../Lab07/app/.gitignore	(date 1697475330857)
@@ -0,0 +1,1 @@
+/build
\ No newline at end of file
Index: ../Lab10/app/src/main/java/com/example/lab10/GameView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab10/app/src/main/java/com/example/lab10/GameView.java b/../Lab10/app/src/main/java/com/example/lab10/GameView.java
new file mode 100644
--- /dev/null	(date 1704817668493)
+++ b/../Lab10/app/src/main/java/com/example/lab10/GameView.java	(date 1704817668493)
@@ -0,0 +1,165 @@
+package com.example.lab10;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Path;
+import android.graphics.RectF;
+import android.graphics.Region;
+import android.os.Build;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+import android.view.SurfaceHolder;
+import android.view.SurfaceView;
+
+public class GameView extends SurfaceView implements Runnable {
+
+    private boolean mRunning;
+    private Thread mGameThread = null;
+    private Path mPath;
+
+    private Context mContext;
+
+    private FlashlightCone mFlashlightCone;
+
+    private Paint mPaint;
+    private Bitmap mBitmap;
+    private RectF mWinnerRect;
+    private int mBitmapX;
+    private int mBitmapY;
+    private int mViewWidth;
+    private int mViewHeight;
+    private SurfaceHolder mSurfaceHolder;
+
+    public GameView(Context context) {
+        this(context, null);
+    }
+
+    public GameView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        mContext = context;
+        mSurfaceHolder = getHolder();
+        mPaint = new Paint();
+        mPaint.setColor(Color.DKGRAY);
+        mPath = new Path();
+    }
+
+    @Override
+    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
+        super.onSizeChanged(w, h, oldw, oldh);
+
+        mViewWidth = w;
+        mViewHeight = h;
+
+        mFlashlightCone = new FlashlightCone(mViewWidth, mViewHeight);
+        
+        mPaint.setTextSize(mViewHeight / 20);
+
+        mBitmap = BitmapFactory.decodeResource(
+                mContext.getResources(), R.drawable.tarank);
+        setUpBitmap();
+    }
+
+    public void run() {
+
+        Canvas canvas;
+
+        while (mRunning) {
+            
+            if (mSurfaceHolder.getSurface().isValid()) {
+                int x = mFlashlightCone.getX();
+                int y = mFlashlightCone.getY();
+                int radius = mFlashlightCone.getRadius();
+
+                canvas = mSurfaceHolder.lockCanvas();
+                canvas.save();
+
+                canvas.drawColor(Color.WHITE);
+                canvas.drawBitmap(mBitmap, mBitmapX, mBitmapY, mPaint);
+
+
+                mPath.addCircle(x, y, radius, Path.Direction.CCW);
+//                canvas.drawColor(Color.GREEN);
+//                canvas.drawText(
+//                        "Find Taran!", (int)(mViewWidth / 5), mViewHeight / 4, mPaint);
+
+
+                if (android.os.Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {
+                    canvas.clipPath(mPath, Region.Op.DIFFERENCE);
+                } else {
+                    canvas.clipOutPath(mPath);
+                }
+
+                canvas.drawColor(Color.BLACK);
+
+                if (x > mWinnerRect.left && x < mWinnerRect.right
+                        && y > mWinnerRect.top && y < mWinnerRect.bottom) {
+                    canvas.drawColor(Color.WHITE);
+                    canvas.drawBitmap(mBitmap, mBitmapX, mBitmapY, mPaint);
+                    canvas.drawColor(Color.GREEN);
+                    canvas.drawText(
+                            "You found Taran!", (int)(mViewWidth / 7), mViewHeight / 2, mPaint);
+                }
+
+                mPath.rewind();
+                canvas.restore();
+                mSurfaceHolder.unlockCanvasAndPost(canvas);
+            }
+        }
+    }
+
+    private void updateFrame(int newX, int newY) {
+        mFlashlightCone.update(newX, newY);
+    }
+
+    private void setUpBitmap() {
+        mBitmapX = (int) Math.floor(
+                Math.random() * (mViewWidth - mBitmap.getWidth()));
+        mBitmapY = (int) Math.floor(
+                Math.random() * (mViewHeight - mBitmap.getHeight()));
+        mWinnerRect = new RectF(mBitmapX, mBitmapY,
+                mBitmapX + mBitmap.getWidth(),
+                mBitmapY + mBitmap.getHeight());
+    }
+
+    public void pause() {
+        mRunning = false;
+        try {
+            
+            mGameThread.join();
+        } catch (InterruptedException e) {
+        }
+    }
+
+    public void resume() {
+        mRunning = true;
+        mGameThread = new Thread(this);
+        mGameThread.start();
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        float x = event.getX();
+        float y = event.getY();
+        
+        switch (event.getAction()) {
+            case MotionEvent.ACTION_DOWN:
+                setUpBitmap();
+                
+                updateFrame((int) x, (int) y);
+                invalidate();
+                break;
+            case MotionEvent.ACTION_MOVE:
+                
+                updateFrame((int) x, (int) y);
+                invalidate();
+                break;
+            default:
+                
+        }
+        return true;
+    }
+}
\ No newline at end of file
Index: ../Lab08/app/src/main/java/com/example/lab08/Drawing.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab08/app/src/main/java/com/example/lab08/Drawing.java b/../Lab08/app/src/main/java/com/example/lab08/Drawing.java
new file mode 100644
--- /dev/null	(date 1699552187566)
+++ b/../Lab08/app/src/main/java/com/example/lab08/Drawing.java	(date 1699552187566)
@@ -0,0 +1,56 @@
+package com.example.lab08;
+
+import static java.lang.Double.max;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.LinearGradient;
+import android.graphics.Paint;
+import android.graphics.RadialGradient;
+import android.graphics.Shader;
+import android.media.MediaPlayer;
+import android.util.AttributeSet;
+import android.view.View;
+
+import androidx.annotation.Nullable;
+
+    public class Drawing extends View {
+        Paint p = new Paint();
+        float y,x,dy,dx;
+        float radius;
+
+        public Drawing(Context context, @Nullable AttributeSet attrs) {
+            super(context, attrs);
+        }
+
+        @Override
+        protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+            super.onLayout(changed, left, top, right, bottom);
+            radius = getWidth()*.2f;
+            y = getHeight()*0.5f;
+            x = getWidth()*0.5f;
+            dy = 15;
+            dx = 15;
+        }
+
+        @Override
+        protected void onDraw(Canvas canvas) {
+            super.onDraw(canvas);
+            p.setShader(new LinearGradient(x,y,dx,dx, Color.RED, Color.BLUE, Shader.TileMode.MIRROR));
+            canvas.drawRect(getLeft(),0,getRight(),getBottom(),p);
+            p.setShader(new RadialGradient(getWidth()*.5f,y,radius,Color.YELLOW,Color.RED,Shader.TileMode.MIRROR));
+            canvas.drawCircle(x,y,radius,p);
+            x+=dx;
+            y+=dy;
+            if (y > getHeight() - radius || y < radius) {
+                MainActivity.mediaPlayer.start();
+                dy *= -1;
+            }
+            if (x > getWidth() - radius || x < radius) {
+                MainActivity.mediaPlayer.start();
+                dx *= -1;
+            }
+            invalidate();
+        }
+    }
\ No newline at end of file
Index: ../Lab07/app/src/main/res/layout/fragment_blank.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/app/src/main/res/layout/fragment_blank.xml b/../Lab07/app/src/main/res/layout/fragment_blank.xml
new file mode 100644
--- /dev/null	(date 1698943979521)
+++ b/../Lab07/app/src/main/res/layout/fragment_blank.xml	(date 1698943979521)
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+    <LinearLayout
+        android:layout_width="300dp"
+        android:layout_height="200dp"
+        android:id="@+id/layout"
+        android:background="@color/gray"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintLeft_toLeftOf="parent"
+        app:layout_constraintRight_toRightOf="parent"
+        android:gravity="center"
+        android:orientation="vertical">
+<!--        <androidx.appcompat.widget.AppCompatButton-->
+<!--            android:layout_width="wrap_content"-->
+<!--            android:layout_height="wrap_content"-->
+<!--            app:layout_constraintTop_toBottomOf="@+id/layout"-->
+<!--            android:id="@+id/b_button"-->
+<!--            android:text=""-->
+<!--            android:backgroundTint="@color/teal_200"-->
+<!--            app:layout_constraintWidth_percent=".4"-->
+<!--            android:onClick="fragment_button_onclick"/>-->
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:id="@+id/b_textview"
+            android:textColor="@color/black"
+            android:text=""
+            app:layout_constraintTop_toBottomOf="@+id/b_button" />
+    </LinearLayout>
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1699983242395)
+++ b/.idea/compiler.xml	(date 1699983242395)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <bytecodeTargetLevel target="17" />
+  </component>
+</project>
\ No newline at end of file
Index: ../Lab07/app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/app/build.gradle.kts b/../Lab07/app/build.gradle.kts
new file mode 100644
--- /dev/null	(date 1697475332813)
+++ b/../Lab07/app/build.gradle.kts	(date 1697475332813)
@@ -0,0 +1,39 @@
+plugins {
+    id("com.android.application")
+}
+
+android {
+    namespace = "com.example.lab07"
+    compileSdk = 33
+
+    defaultConfig {
+        applicationId = "com.example.lab07"
+        minSdk = 24
+        targetSdk = 33
+        versionCode = 1
+        versionName = "1.0"
+
+        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
+    }
+
+    buildTypes {
+        release {
+            isMinifyEnabled = false
+            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
+        }
+    }
+    compileOptions {
+        sourceCompatibility = JavaVersion.VERSION_1_8
+        targetCompatibility = JavaVersion.VERSION_1_8
+    }
+}
+
+dependencies {
+
+    implementation("androidx.appcompat:appcompat:1.6.1")
+    implementation("com.google.android.material:material:1.9.0")
+    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
+    testImplementation("junit:junit:4.13.2")
+    androidTestImplementation("androidx.test.ext:junit:1.1.5")
+    androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")
+}
\ No newline at end of file
Index: app/src/main/java/com/example/lab09/Bad.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/lab09/Bad.java b/app/src/main/java/com/example/lab09/Bad.java
new file mode 100644
--- /dev/null	(date 1705598494347)
+++ b/app/src/main/java/com/example/lab09/Bad.java	(date 1705598494347)
@@ -0,0 +1,83 @@
+package com.example.lab09;
+
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.RadialGradient;
+import android.graphics.Rect;
+import android.graphics.RectF;
+import android.graphics.Shader;
+
+public class Bad extends RectF {
+    private int dY, dX, radius, color;
+    private static final int BMP_COLUMNS = 4;
+    private static final int BMP_ROWS = 4;
+    private static final int DOWN=0, LEFT=1, RIGHT=2, UP=3;
+    private Bitmap bitmap;
+    private int currentFrame=0, iconWidth, iconHeight, animationDelay=10;
+
+    public Bad(float left, float top, float right, float bottom, int dY, int dX, int color) {
+        super(left, top, right, bottom);
+        this.dY = dY;
+        this.dX = dX;
+        this.color = color;
+        radius=50;
+    }
+
+    public Bad(int dY, int dX, int color) {
+        this(0,0,128,192,dX,dY,color);
+    }
+
+    public Bad() {
+        this(0,0,Color.GRAY);
+    }
+
+    public void draw(Canvas canvas){
+        Paint paint = new Paint();
+        paint.setColor(color);
+        paint.setShader(new RadialGradient(centerX(),centerY(),radius,Color.BLACK,Color.RED, Shader.TileMode.MIRROR));
+        canvas.drawCircle(centerX(), centerY(), radius, paint);
+    }
+
+    public void update(Canvas canvas){
+        if((left+dX)<0||(right+dX)>canvas.getWidth())
+            dX*=-1;
+        if((top+dY)<250||(bottom+dY)>canvas.getHeight())
+            dY*=-1;
+        offset((float) (dX*0.005), (float) (dY*0.005));
+        if(animationDelay--<0) {
+            currentFrame = ++currentFrame % BMP_COLUMNS;
+            animationDelay=10;
+        }
+    }
+
+    public int getdX() {
+        return dX;
+    }
+
+    public void setdX(int dX) {
+        this.dX = dX;
+    }
+
+    public int getdY() {
+        return dY;
+    }
+
+    public void setdY(int dY) {
+        this.dY = dY;
+    }
+
+    public int getColor() {
+        return color;
+    }
+
+    public void setColor(int color) {
+        this.color = color;
+    }
+
+    public void grow(int i) {
+        right=right+i;
+        bottom=bottom+i;
+    }
+}
\ No newline at end of file
Index: ../Lab07/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml b/../Lab07/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
new file mode 100644
--- /dev/null	(date 1697475332397)
+++ b/../Lab07/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml	(date 1697475332397)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
\ No newline at end of file
Index: ../Lab07/app/src/main/java/com/example/lab07/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/app/src/main/java/com/example/lab07/MainActivity.java b/../Lab07/app/src/main/java/com/example/lab07/MainActivity.java
new file mode 100644
--- /dev/null	(date 1698943979540)
+++ b/../Lab07/app/src/main/java/com/example/lab07/MainActivity.java	(date 1698943979540)
@@ -0,0 +1,36 @@
+package com.example.lab07;
+
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.fragment.app.FragmentTransaction;
+
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.TextView;
+
+public class MainActivity extends AppCompatActivity {
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+
+        FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
+        ft.add(R.id.fragment_container, FragmentB.newInstance(0,"What is the powerhouse of the cell?"),"FragmentName");
+        ft.commit();
+    }
+
+    public void update_greeting(View view) {
+        FragmentB fragmentB = (FragmentB)getSupportFragmentManager().findFragmentByTag("FragmentName");
+        if(fragmentB!=null)
+            ((TextView)fragmentB.view.findViewById(R.id.b_textview)).setText(R.string.greeting2);
+        FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
+        ft.setCustomAnimations(R.animator.slide_up,R.animator.slide_down);
+        ft.replace(R.id.fragment_container, FragmentB.newInstance(0,"Mitochondria"),"BetterFragment");
+        ft.commit();
+    }
+
+    public void fragment_button_onclick(View view) {
+        ((Button)view).setText(R.string.clicked_message);
+    }
+}
\ No newline at end of file
Index: ../Lab07/gradlew
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/gradlew b/../Lab07/gradlew
new file mode 100644
--- /dev/null	(date 1697475330364)
+++ b/../Lab07/gradlew	(date 1697475330364)
@@ -0,0 +1,185 @@
+#!/usr/bin/env sh
+
+#
+# Copyright 2015 the original author or authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn () {
+    echo "$*"
+}
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin or MSYS, switch paths to Windows format before running java
+if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=`expr $i + 1`
+    done
+    case $i in
+        0) set -- ;;
+        1) set -- "$args0" ;;
+        2) set -- "$args0" "$args1" ;;
+        3) set -- "$args0" "$args1" "$args2" ;;
+        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
+}
+APP_ARGS=`save "$@"`
+
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+exec "$JAVACMD" "$@"
Index: ../Lab07/gradlew.bat
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/gradlew.bat b/../Lab07/gradlew.bat
new file mode 100644
--- /dev/null	(date 1697475330380)
+++ b/../Lab07/gradlew.bat	(date 1697475330380)
@@ -0,0 +1,89 @@
+@rem
+@rem Copyright 2015 the original author or authors.
+@rem
+@rem Licensed under the Apache License, Version 2.0 (the "License");
+@rem you may not use this file except in compliance with the License.
+@rem You may obtain a copy of the License at
+@rem
+@rem      https://www.apache.org/licenses/LICENSE-2.0
+@rem
+@rem Unless required by applicable law or agreed to in writing, software
+@rem distributed under the License is distributed on an "AS IS" BASIS,
+@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+@rem See the License for the specific language governing permissions and
+@rem limitations under the License.
+@rem
+
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Resolve any "." and ".." in APP_HOME to make it shorter.
+for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto execute
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto execute
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1699983240933)
+++ b/.idea/vcs.xml	(date 1699983240933)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: ../Lab10/.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab10/.idea/.gitignore b/../Lab10/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1701968323847)
+++ b/../Lab10/.idea/.gitignore	(date 1701968323847)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: ../Lab07/app/src/androidTest/java/com/example/lab07/ExampleInstrumentedTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/app/src/androidTest/java/com/example/lab07/ExampleInstrumentedTest.java b/../Lab07/app/src/androidTest/java/com/example/lab07/ExampleInstrumentedTest.java
new file mode 100644
--- /dev/null	(date 1697475331944)
+++ b/../Lab07/app/src/androidTest/java/com/example/lab07/ExampleInstrumentedTest.java	(date 1697475331944)
@@ -0,0 +1,26 @@
+package com.example.lab07;
+
+import android.content.Context;
+
+import androidx.test.platform.app.InstrumentationRegistry;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.junit.Assert.*;
+
+/**
+ * Instrumented test, which will execute on an Android device.
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+@RunWith(AndroidJUnit4.class)
+public class ExampleInstrumentedTest {
+    @Test
+    public void useAppContext() {
+        // Context of the app under test.
+        Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();
+        assertEquals("com.example.lab07", appContext.getPackageName());
+    }
+}
\ No newline at end of file
Index: ../Lab07/gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/../Lab07/gradle.properties b/../Lab07/gradle.properties
new file mode 100644
--- /dev/null	(date 1697475330747)
+++ b/../Lab07/gradle.properties	(date 1697475330747)
@@ -0,0 +1,21 @@
+# Project-wide Gradle settings.
+# IDE (e.g. Android Studio) users:
+# Gradle settings configured through the IDE *will override*
+# any settings specified in this file.
+# For more details on how to configure your build environment visit
+# http://www.gradle.org/docs/current/userguide/build_environment.html
+# Specifies the JVM arguments used for the daemon process.
+# The setting is particularly useful for tweaking memory settings.
+org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
+# When configured, Gradle will run in incubating parallel mode.
+# This option should only be used with decoupled projects. More details, visit
+# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
+# org.gradle.parallel=true
+# AndroidX package structure to make it clearer which packages are bundled with the
+# Android operating system, and which are packaged with your app's APK
+# https://developer.android.com/topic/libraries/support-library/androidx-rn
+android.useAndroidX=true
+# Enables namespacing of each library's R class so that its R class includes only the
+# resources declared in the library itself and none from the library's dependencies,
+# thereby reducing the size of the R class for that library
+android.nonTransitiveRClass=true
\ No newline at end of file
Index: ../Lab07/app/src/main/res/xml/backup_rules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/app/src/main/res/xml/backup_rules.xml b/../Lab07/app/src/main/res/xml/backup_rules.xml
new file mode 100644
--- /dev/null	(date 1697475332570)
+++ b/../Lab07/app/src/main/res/xml/backup_rules.xml	(date 1697475332570)
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?><!--
+   Sample backup rules file; uncomment and customize as necessary.
+   See https://developer.android.com/guide/topics/data/autobackup
+   for details.
+   Note: This file is ignored for devices older that API 31
+   See https://developer.android.com/about/versions/12/backup-restore
+-->
+<full-backup-content>
+    <!--
+   <include domain="sharedpref" path="."/>
+   <exclude domain="sharedpref" path="device.xml"/>
+-->
+</full-backup-content>
\ No newline at end of file
Index: app/src/main/java/com/example/lab09/Sprite.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/lab09/Sprite.java b/app/src/main/java/com/example/lab09/Sprite.java
new file mode 100644
--- /dev/null	(date 1705597971755)
+++ b/app/src/main/java/com/example/lab09/Sprite.java	(date 1705597971755)
@@ -0,0 +1,113 @@
+package com.example.lab09;
+
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.graphics.RectF;
+
+public class Sprite extends RectF {
+    private int dY, dX, color;
+    private static final int BMP_COLUMNS = 4;
+    private static final int BMP_ROWS = 4;
+    private static final int DOWN=0, LEFT=1, RIGHT=2, UP=3;
+
+    private Bitmap bitmap;
+    private int currentFrame=0, iconWidth, iconHeight, animationDelay=10;
+
+    public Sprite(float left, float top, float right, float bottom, int dY, int dX, int color) {
+        super(left, top, right, bottom);
+        this.dY = dY;
+        this.dX = dX;
+        this.color = color;
+    }
+
+    public Sprite(int dY, int dX, int color) {
+
+        this(0,250,128,250 +192,dX,dY,color);
+    }
+
+    public Sprite() {
+        this(0,0,Color.GRAY);
+    }
+
+    public Sprite(RectF r){
+        super(r);
+    }
+
+    public void update(Canvas canvas){
+        if((left+dX)<0||(right+dX)>canvas.getWidth())
+            dX*=-1;
+        if((top+dY)<250||(bottom+dY)>canvas.getHeight())
+            dY*=-1;
+        offset(dX,dY);
+        if(animationDelay--<0) {
+            currentFrame = ++currentFrame % BMP_COLUMNS;
+            animationDelay=10;
+        }
+    }
+
+    public void draw(Canvas canvas){
+        if(bitmap==null) {
+            Paint paint = new Paint();
+            paint.setColor(color);
+            canvas.drawCircle(centerX(), centerY(), width() / 2, paint);
+        }else {
+            iconWidth = bitmap.getWidth() / BMP_COLUMNS;
+            iconHeight = bitmap.getHeight() / BMP_ROWS;
+            int srcX = currentFrame * iconWidth;
+            int srcY = getAnimationRow() * iconHeight;
+            Rect src = new Rect(srcX, srcY, srcX + iconWidth, srcY + iconHeight);
+            canvas.drawBitmap(bitmap,src, this,null);
+        }
+    }
+
+    private int getAnimationRow() {
+        if (Math.abs(dX)>Math.abs(dY)){        
+            if(Math.abs(dX)==dX) return RIGHT;
+            else return LEFT;
+        } else if(Math.abs(dY)==dY) return DOWN;
+        else return UP;
+
+    }
+
+    public int getdX() {
+        return dX;
+    }
+
+    public void setdX(int dX) {
+        this.dX = dX;
+    }
+
+    public int getdY() {
+        return dY;
+    }
+
+    public void setdY(int dY) {
+        this.dY = dY;
+    }
+
+    public int getColor() {
+        return color;
+    }
+
+    public void setColor(int color) {
+        this.color = color;
+    }
+
+    public Bitmap getBitmap() {
+        return bitmap;
+    }
+
+    public void setBitmap(Bitmap bitmap) {
+        this.bitmap = bitmap;
+    }
+
+
+
+    public void grow(int i) {
+        right=right+i;
+        bottom=bottom+i;
+    }
+}
\ No newline at end of file
Index: ../Lab10/.idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab10/.idea/gradle.xml b/../Lab10/.idea/gradle.xml
new file mode 100644
--- /dev/null	(date 1702399424456)
+++ b/../Lab10/.idea/gradle.xml	(date 1702399424456)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
+  <component name="GradleSettings">
+    <option name="linkedExternalProjectsSettings">
+      <GradleProjectSettings>
+        <option name="testRunner" value="GRADLE" />
+        <option name="distributionType" value="DEFAULT_WRAPPED" />
+        <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="gradleJvm" value="jbr-17" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$" />
+            <option value="$PROJECT_DIR$/app" />
+          </set>
+        </option>
+      </GradleProjectSettings>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1705601346407)
+++ b/.idea/misc.xml	(date 1705601346407)
@@ -0,0 +1,9 @@
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="jbr-17" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/build/classes" />
+  </component>
+  <component name="ProjectType">
+    <option name="id" value="Android" />
+  </component>
+</project>
\ No newline at end of file
Index: ../Lab10/.idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab10/.idea/compiler.xml b/../Lab10/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1701968357509)
+++ b/../Lab10/.idea/compiler.xml	(date 1701968357509)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <bytecodeTargetLevel target="17" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
new file mode 100644
--- /dev/null	(date 1699984608428)
+++ b/.idea/gradle.xml	(date 1699984608428)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
+  <component name="GradleSettings">
+    <option name="linkedExternalProjectsSettings">
+      <GradleProjectSettings>
+        <option name="testRunner" value="GRADLE" />
+        <option name="distributionType" value="DEFAULT_WRAPPED" />
+        <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="gradleJvm" value="jbr-17" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$" />
+            <option value="$PROJECT_DIR$/app" />
+          </set>
+        </option>
+      </GradleProjectSettings>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: ../Lab10/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab10/.idea/vcs.xml b/../Lab10/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1701968323466)
+++ b/../Lab10/.idea/vcs.xml	(date 1701968323466)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/java/com/example/lab09/DrawView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/lab09/DrawView.java b/app/src/main/java/com/example/lab09/DrawView.java
new file mode 100644
--- /dev/null	(date 1705601509516)
+++ b/app/src/main/java/com/example/lab09/DrawView.java	(date 1705601509516)
@@ -0,0 +1,264 @@
+package com.example.lab09;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.LinearGradient;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.graphics.RectF;
+import android.graphics.Shader;
+import android.media.AudioAttributes;
+import android.media.AudioManager;
+import android.media.SoundPool;
+import android.os.Build;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+import android.view.SurfaceHolder;
+import android.view.SurfaceView;
+
+import androidx.annotation.Nullable;
+
+import java.util.ArrayList;
+
+public class DrawView extends SurfaceView {
+    SurfaceHolder surface;
+    Paint paint = new Paint();
+    Sprite sprite = new Sprite();
+    Canvas canvas;
+    boolean isRunning=true;
+    int frames=0,count=0,mcount=0,money=0,mm=1;
+    Bad badGuy;
+    Good goodGuy;
+    ArrayList<Coin> coins = new ArrayList<>();
+    ArrayList<Coin> coins2 = new ArrayList<>();
+    Bitmap coinbmp = BitmapFactory.decodeResource(getResources(), R.drawable.imageedit_2_4302960885);
+    float floor, roof;
+    Rect testRect, back, freeze, speed, mult;
+    RectF coinr;
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        super.onLayout(changed, left, top, right, bottom);
+        floor = getHeight()*0.9f;
+        roof = getHeight()*0.1f;
+        badGuy = generateSprite();
+        goodGuy = genSprite();
+        testRect = new Rect(800,25,1050,85);
+        back = new Rect(0,0,(int)getWidth(),250);
+        freeze = new Rect(400, 25, 600, 85);
+        speed = new Rect(400, 75+25, 600, 75+85);
+        mult = new Rect(400, 75+75+25, 600, 75+75+85);
+        coinr = new RectF(100, 150, 500, 700);
+    }
+
+    public DrawView(Context context, @Nullable AttributeSet attrs) {
+        super(context, attrs);
+        surface=getHolder();
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                long lastTime = System.nanoTime();
+                double amountOfTicks = 60;
+                double ns = 1000000000 / amountOfTicks;
+                long timer = System.currentTimeMillis();
+                int updates = 0;
+                while(true){
+                    long now = System.nanoTime();
+                    if(now - lastTime<ns){
+                        try{
+                            Thread.sleep((long)((ns - (now-lastTime)))/1000000);
+                        }catch(Exception e){}
+                    }
+                    lastTime = System.nanoTime();
+                    if(isRunning){
+                        if(!surface.getSurface().isValid())continue;
+                        canvas = surface.lockCanvas();
+                        synchronized (getHolder()){
+                            update(canvas);
+                            draw(canvas);
+                        }
+                        surface.unlockCanvasAndPost(canvas);
+                    }
+                    updates++;
+                    if(System.currentTimeMillis() - timer > 1000 ){
+                        timer+= 1000;
+                        System.out.println("UPS: " +updates +" FPS: "+frames);
+                        updates = 0;
+                        frames = 0;
+                    }
+                }
+            }
+        }).start();
+        sprite.setBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.dudeman2));
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+        sprite.update(canvas);
+        badGuy.update(canvas);
+        goodGuy.update(canvas);
+        for(int i=coins.size()-1;i>=0;i--){
+            coins.get(i).update();
+            if (RectF.intersects(sprite,coins.get(i))){
+                money+=mm;
+                coins.remove(i);
+            }
+        }
+        if(RectF.intersects(sprite, badGuy)){
+            sprite.setEmpty();
+            coins = new ArrayList<>();
+            count=0;
+        }
+        if(RectF.intersects(sprite, goodGuy)){
+            count++;
+            if (count > mcount){
+                mcount = count;
+            }
+            goodGuy=genSprite();
+            new Coin(goodGuy,coins,coinbmp);
+
+        }
+        if(!(sprite.isEmpty())) {
+            int x = (int) (sprite.centerX() - badGuy.centerX());
+            int y = (int) (sprite.centerY() - badGuy.centerY());
+            int nx = 1, ny = 1;
+            if (x < 0){
+                nx = -1;
+            }
+            if (y < 0){
+                ny = -1;
+            }
+            x = Math.min(Math.abs(x),1000)*nx;
+            y = Math.min(Math.abs(y),1000)*ny;
+            badGuy.setdX(x);
+            badGuy.setdY(y);
+        }
+        paint.setColor(Color.GREEN);
+        for(int l = 40; l <= getWidth(); l+=200){
+            canvas.drawLine(l,250,l, getHeight(), paint);
+        }
+        for(int l = 10; l <= getHeight(); l+=200){
+            canvas.drawLine(0,l,getWidth(),l, paint);
+        }
+        sprite.draw(canvas);
+        badGuy.draw(canvas);
+        goodGuy.draw(canvas);
+        paint.setTextSize(44);
+        paint.setStrokeWidth(12);
+        paint.setColor(Color.GRAY);
+        paint.setShader(new LinearGradient(425,72,600,90, Color.BLACK, Color.GRAY, Shader.TileMode.MIRROR));
+        canvas.drawRect(back, paint);
+        paint.setShader(null);
+        paint.setColor(Color.BLACK);
+        canvas.drawRect(testRect,paint);
+        paint.setColor(Color.GREEN);
+        canvas.drawText("Score:          "+count,50,75,paint);
+        canvas.drawText("High Score: "+ mcount,50,125,paint);
+        canvas.drawText("Money:         " + money, 50, 175, paint);
+        if(money < 3){
+            paint.setColor(Color.RED);
+        }
+        else{
+            paint.setColor(Color.GREEN);
+        }
+        canvas.drawText("3", 625, 72, paint);
+        if(money < 4){
+            paint.setColor(Color.RED);
+        }
+        else{
+            paint.setColor(Color.GREEN);
+        }
+        canvas.drawText("4", 625, 75+72, paint);
+        if(money < 3){
+            paint.setColor(Color.RED);
+        }
+        else{
+            paint.setColor(Color.GREEN);
+        }
+        canvas.drawText("10", 625, 75+75+72, paint);
+        paint.setColor(Color.GREEN);
+        canvas.drawRect(testRect,paint);
+        paint.setTextSize(44);
+        paint.setStrokeWidth(12);
+        paint.setColor(Color.WHITE);
+        canvas.drawText("RESET",850,75,paint);
+        paint.setColor(Color.BLUE);
+        canvas.drawRect(freeze, paint);
+        paint.setColor(Color.WHITE);
+        canvas.drawText("FREEZE",425,72,paint);
+        paint.setColor(Color.MAGENTA);
+        canvas.drawRect(speed, paint);
+        paint.setColor(Color.WHITE);
+        canvas.drawText("SPEED",430,75+72,paint);
+        paint.setColor(Color.CYAN);
+        canvas.drawRect(mult, paint);
+        paint.setColor(Color.WHITE);
+        canvas.drawText("MULT",445,75+75+72,paint);
+        for(Coin c: coins){
+            c.draw(canvas);
+        }
+        frames++;
+        invalidate();
+    }
+
+    public void update(Canvas canvas) {
+        if (canvas == null) return;
+
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        if(event.getAction()==MotionEvent.ACTION_DOWN){
+            if(testRect.contains((int)event.getX(),(int)event.getY())){
+                sprite = new Sprite();
+                sprite.setBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.dudeman2));
+            }
+            else if(freeze.contains((int)event.getX(),(int)event.getY())){
+                if(money >= 3) {
+                    goodGuy.setdX(0);
+                    goodGuy.setdY(0);
+                    money -= 3;
+                }
+            }
+            else if(mult.contains((int)event.getX(),(int)event.getY())){
+                if(money >= 10) {
+                    money -= 10;
+                    mm = 2;
+                }
+            }
+            else if(mult.contains((int)event.getX(),(int)event.getY())){
+                if(money >= 4) {
+                    sprite.setdX(sprite.getdX()+2);
+                    sprite.setdY(sprite.getdY()+2);
+                    money -= 4;
+
+                }
+            }
+        }
+        return true;
+    }
+
+    public void pause() {//pause-resume
+        isRunning=!isRunning;
+    }
+
+    private Bad generateSprite(){
+        float x = (float)(Math.random()*0.8*getWidth()+.1*getWidth());
+        float y = (float)(Math.random()*0.8*(floor-roof)+.2*(floor-roof));
+        int dX = (int)(Math.random()*3+1);
+        int dY = (int)(Math.random()*3+1);
+        return new Bad(x,y,x+.1f*getWidth(),y+.1f*getWidth(),dX,dY,Color.RED);
+    }
+
+    private Good genSprite(){
+        float x = (float)(Math.random()*0.8*getWidth()+.1*getWidth());
+        float y = (float)(Math.random()*0.8*(floor-roof)+.2*(floor-roof));
+        int dX = (int)(Math.random()*3+1);
+        int dY = (int)(Math.random()*3+1);
+        return new Good(x,y,x+.1f*getWidth(),y+.1f*getWidth(),dX,dY,Color.GREEN);
+    }
+}
\ No newline at end of file
Index: ../Lab07/app/src/main/res/animator/slide_up.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/app/src/main/res/animator/slide_up.xml b/../Lab07/app/src/main/res/animator/slide_up.xml
new file mode 100644
--- /dev/null	(date 1697730963448)
+++ b/../Lab07/app/src/main/res/animator/slide_up.xml	(date 1697730963448)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<objectAnimator
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:interpolator="@android:anim/accelerate_decelerate_interpolator"
+    android:propertyName="translationY"
+    android:valueType="floatType"
+    android:valueFrom="1280"
+    android:valueTo="0"
+    android:duration="@android:integer/config_mediumAnimTime"/>
\ No newline at end of file
Index: ../Lab07/settings.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/settings.gradle.kts b/../Lab07/settings.gradle.kts
new file mode 100644
--- /dev/null	(date 1697475331286)
+++ b/../Lab07/settings.gradle.kts	(date 1697475331286)
@@ -0,0 +1,18 @@
+pluginManagement {
+    repositories {
+        google()
+        mavenCentral()
+        gradlePluginPortal()
+    }
+}
+dependencyResolutionManagement {
+    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
+    repositories {
+        google()
+        mavenCentral()
+    }
+}
+
+rootProject.name = "Lab07"
+include(":app")
+ 
\ No newline at end of file
Index: ../Lab07/gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/../Lab07/gradle/wrapper/gradle-wrapper.properties b/../Lab07/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
--- /dev/null	(date 1697475333956)
+++ b/../Lab07/gradle/wrapper/gradle-wrapper.properties	(date 1697475333956)
@@ -0,0 +1,6 @@
+#Mon Oct 16 09:55:33 PDT 2023
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.0-bin.zip
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
Index: ../Lab07/app/src/main/res/drawable/ic_launcher_foreground.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/app/src/main/res/drawable/ic_launcher_foreground.xml b/../Lab07/app/src/main/res/drawable/ic_launcher_foreground.xml
new file mode 100644
--- /dev/null	(date 1697475332381)
+++ b/../Lab07/app/src/main/res/drawable/ic_launcher_foreground.xml	(date 1697475332381)
@@ -0,0 +1,30 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:aapt="http://schemas.android.com/aapt"
+    android:width="108dp"
+    android:height="108dp"
+    android:viewportWidth="108"
+    android:viewportHeight="108">
+    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
+        <aapt:attr name="android:fillColor">
+            <gradient
+                android:endX="85.84757"
+                android:endY="92.4963"
+                android:startX="42.9492"
+                android:startY="49.59793"
+                android:type="linear">
+                <item
+                    android:color="#44000000"
+                    android:offset="0.0" />
+                <item
+                    android:color="#00000000"
+                    android:offset="1.0" />
+            </gradient>
+        </aapt:attr>
+    </path>
+    <path
+        android:fillColor="#FFFFFF"
+        android:fillType="nonZero"
+        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
+        android:strokeWidth="1"
+        android:strokeColor="#00000000" />
+</vector>
\ No newline at end of file
Index: ../Lab07/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/.gitignore b/../Lab07/.gitignore
new file mode 100644
--- /dev/null	(date 1697475330318)
+++ b/../Lab07/.gitignore	(date 1697475330318)
@@ -0,0 +1,15 @@
+*.iml
+.gradle
+/local.properties
+/.idea/caches
+/.idea/libraries
+/.idea/modules.xml
+/.idea/workspace.xml
+/.idea/navEditor.xml
+/.idea/assetWizardSettings.xml
+.DS_Store
+/build
+/captures
+.externalNativeBuild
+.cxx
+local.properties
Index: app/src/main/java/com/example/lab09/Coin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/lab09/Coin.java b/app/src/main/java/com/example/lab09/Coin.java
new file mode 100644
--- /dev/null	(date 1704823997358)
+++ b/app/src/main/java/com/example/lab09/Coin.java	(date 1704823997358)
@@ -0,0 +1,60 @@
+package com.example.lab09;
+
+
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Rect;
+import android.graphics.RectF;
+
+import java.util.ArrayList;
+
+public class Coin extends Sprite {
+    private int duration=100;
+    private ArrayList explosions;
+    private Bitmap bitmap;
+    private static final int BMP_COLUMNS = 3;
+    private static final int BMP_ROWS = 2;
+    private int currentFrame=0, iconWidth, iconHeight, animationDelay=20;
+    public Coin(RectF r, ArrayList<Coin> list, Bitmap i){
+        super(r);
+        explosions=list;
+        explosions.add(this);//adds itself to list of explosions
+        bitmap=i;
+    }
+    public void update(){
+        if(animationDelay--<0) {//increment to next sprite image after delay
+            currentFrame = ++currentFrame % 6;//cycles current image with boundary proteciton
+            animationDelay=6;//arbitrary delay before cycling to next image
+        }
+    }
+    public void draw(Canvas canvas){
+//        System.out.println(bitmap.getWidth());
+//        iconWidth = bitmap.getWidth() / BMP_COLUMNS;//calculate width of 1 image
+//        iconHeight = bitmap.getHeight() / BMP_ROWS; //calculate height of 1 image
+//        int srcX = 0, srcY = 0;
+        Rect src = new Rect();
+        if (currentFrame == 0) {
+             src = new Rect(0, 2, 75, 80);
+        }
+        else if (currentFrame == 1) {
+             src = new Rect(75, 2, 140, 80);
+        }
+        else if (currentFrame == 2) {
+             src = new Rect(140, 2, 184, 80);
+        }
+        else if (currentFrame == 3) {
+             src = new Rect(20, 80, 60, 160);
+        }
+        else if (currentFrame == 4) {
+             src = new Rect(60, 80, 110, 160);
+        }
+        else if (currentFrame == 5) {
+             src = new Rect(110, 80, 184, 160);
+        }
+         //set y to row of bitmap based on direction
+        canvas.drawBitmap(bitmap,src, this,null); //draw an image
+    }
+    private int getAnimationRow() {
+        return currentFrame/BMP_ROWS;//int division to get current row
+    }
+}
\ No newline at end of file
Index: ../Lab07/app/src/main/res/values-night/themes.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/app/src/main/res/values-night/themes.xml b/../Lab07/app/src/main/res/values-night/themes.xml
new file mode 100644
--- /dev/null	(date 1697475332570)
+++ b/../Lab07/app/src/main/res/values-night/themes.xml	(date 1697475332570)
@@ -0,0 +1,7 @@
+<resources xmlns:tools="http://schemas.android.com/tools">
+    <!-- Base application theme. -->
+    <style name="Base.Theme.Lab07" parent="Theme.Material3.DayNight.NoActionBar">
+        <!-- Customize your dark theme here. -->
+        <!-- <item name="colorPrimary">@color/my_dark_primary</item> -->
+    </style>
+</resources>
\ No newline at end of file
Index: ../Lab_03/app/src/main/java/com/example/lab03/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.lab03;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\n\r\n\r\nimport android.graphics.Color;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.SeekBar;\r\nimport android.widget.TextView;\r\nimport android.content.SharedPreferences;\r\n\r\nimport com.google.android.material.snackbar.Snackbar;\r\n\r\npublic class MainActivity extends AppCompatActivity{\r\n    Button red_btn,green_btn,blue_btn,yellow_btn, start_btn;\r\n    TextView[] views;\r\n    SeekBar seekBar;\r\n    ConstraintLayout layout;\r\n    SharedPreferences sharedPreferences;\r\n    SharedPreferences.Editor editor;\r\n    String[] correct, user;\r\n    int index;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        seekBar = findViewById(R.id.seekbar);\r\n        start_btn = findViewById(R.id.start_btn);\r\n        red_btn = findViewById(R.id.red_btn);\r\n        green_btn = findViewById(R.id.green_btn);\r\n        blue_btn = findViewById(R.id.blue_btn);\r\n        yellow_btn = findViewById(R.id.yellow_btn);\r\n        views = new TextView[]{red_btn,green_btn,blue_btn,yellow_btn};\r\n        for (TextView x: views) {x.setText(\"0\");}\r\n        sharedPreferences = getSharedPreferences(\"settings\", MODE_PRIVATE);\r\n        editor = sharedPreferences.edit();\r\n        layout = findViewById(R.id.activity_main_layout);\r\n        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\r\n            int prev;\r\n\r\n            @Override\r\n            public void onProgressChanged(SeekBar seekBar, int progress, boolean b) {\r\n                for (TextView x : views) {x.setTextSize(progress + 20);}\r\n            }\r\n\r\n            @Override\r\n            public void onStartTrackingTouch(SeekBar seekBar) {\r\n                prev = seekBar.getProgress();\r\n            }\r\n\r\n            @Override\r\n            public void onStopTrackingTouch(SeekBar seekBar) {\r\n                Snackbar snackbar = Snackbar.make(layout,\r\n                        \"Font Size Changed To \" + seekBar.getProgress() + \"sp\",\r\n                        Snackbar.LENGTH_LONG);\r\n                snackbar.setActionTextColor(Color.BLUE);\r\n                View snackBarView = snackbar.getView();\r\n                TextView textView = snackBarView.findViewById(com.google.android.material.R.id.snackbar_text);\r\n                textView.setTextColor(Color.WHITE);\r\n                snackbar.show();\r\n            }\r\n\r\n        });\r\n        layout.setOnLongClickListener(new View.OnLongClickListener() {\r\n            @Override\r\n            public boolean onLongClick(View v) {\r\n                editor.clear().apply();\r\n                setValues();\r\n                return false;\r\n            }\r\n        });\r\n        setValues();\r\n    }\r\n\r\n    private void setValues() {\r\n        for (TextView x:views) {\r\n            x.setText(sharedPreferences.getString(x.getTag().toString(),\"0\"));\r\n        }\r\n        seekBar.setProgress(10);\r\n    }\r\n\r\n    public void click(View v) {\r\n        TextView textView = (TextView) v;\r\n        textView.setText(\"\" + (1+Integer.parseInt((String) textView.getText())));\r\n        editor.putString(textView.getTag().toString(),textView.getText().toString()).apply();\r\n        if (index != -1) {\r\n            user[index] = textView.getTag().toString();\r\n            if (!user[index].equals(correct[index])) {\r\n                Snackbar snackbar = Snackbar.make(layout,\r\n                        \"YOU FAIL\",\r\n                        Snackbar.LENGTH_LONG);\r\n                snackbar.setActionTextColor(Color.BLUE);\r\n                View snackBarView = snackbar.getView();\r\n                TextView view = snackBarView.findViewById(com.google.android.material.R.id.snackbar_text);\r\n                view.setTextColor(Color.RED);\r\n                snackbar.show();\r\n                index = -1;\r\n            } else if (++index >= correct.length) {\r\n                Snackbar snackbar = Snackbar.make(layout,\r\n                        \"YOU PASS\",\r\n                        Snackbar.LENGTH_LONG);\r\n                snackbar.setActionTextColor(Color.BLUE);\r\n                View snackBarView = snackbar.getView();\r\n                TextView view = snackBarView.findViewById(com.google.android.material.R.id.snackbar_text);\r\n                view.setTextColor(Color.GREEN);\r\n                snackbar.show();\r\n                index = -1;\r\n            }\r\n        }\r\n        else {\r\n            Snackbar snackbar = Snackbar.make(layout,\r\n                    \"PLEASE RESTART\",\r\n                    Snackbar.LENGTH_LONG);\r\n            snackbar.setActionTextColor(Color.BLUE);\r\n            View snackBarView = snackbar.getView();\r\n            TextView view = snackBarView.findViewById(com.google.android.material.R.id.snackbar_text);\r\n            view.setTextColor(Color.CYAN);\r\n            snackbar.show();\r\n        }\r\n    }\r\n\r\n    public void start(View v) {\r\n        String[] colors = {\"red\", \"green\", \"blue\", \"yellow\"};\r\n        int factor = 9;\r\n        correct = new String[seekBar.getProgress() - factor];\r\n        user = new String[seekBar.getProgress() - factor];\r\n        index = 0;\r\n        for (int i=0; i<correct.length; i++){\r\n            int x = 0 + (int)(Math.random() * ((3) + 1));\r\n            correct[i] = colors[x];\r\n        }\r\n        String txt = \"\";\r\n        for (int i=0; i< correct.length; i++){\r\n            txt += correct[i] + \" \";\r\n        }\r\n        Snackbar snackbar = Snackbar.make(layout,\r\n                txt,\r\n                Snackbar.LENGTH_LONG);\r\n        snackbar.setActionTextColor(Color.BLUE);\r\n        View snackBarView = snackbar.getView();\r\n        TextView textView = snackBarView.findViewById(com.google.android.material.R.id.snackbar_text);\r\n        textView.setTextColor(Color.WHITE);\r\n        snackbar.show();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        setValues();\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab_03/app/src/main/java/com/example/lab03/MainActivity.java b/../Lab_03/app/src/main/java/com/example/lab03/MainActivity.java
--- a/../Lab_03/app/src/main/java/com/example/lab03/MainActivity.java	(revision 08261a5dadd712dc5f517bce5ade7322f41daf05)
+++ b/../Lab_03/app/src/main/java/com/example/lab03/MainActivity.java	(date 1696353125486)
@@ -151,6 +151,11 @@
     protected void onResume() {
         super.onResume();
         setValues();
+        start_btn.setTextColor(Color.RED);
+    }
+    public void onPause() {
+        super.onPause();
+        start_btn.setTextColor(Color.BLUE);
     }
 
 }
\ No newline at end of file
Index: ../Lab07/app/proguard-rules.pro
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/app/proguard-rules.pro b/../Lab07/app/proguard-rules.pro
new file mode 100644
--- /dev/null	(date 1697475330980)
+++ b/../Lab07/app/proguard-rules.pro	(date 1697475330980)
@@ -0,0 +1,21 @@
+# Add project specific ProGuard rules here.
+# You can control the set of applied configuration files using the
+# proguardFiles setting in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
+
+# Uncomment this to preserve the line number information for
+# debugging stack traces.
+#-keepattributes SourceFile,LineNumberTable
+
+# If you keep the line number information, uncomment this to
+# hide the original source file name.
+#-renamesourcefileattribute SourceFile
\ No newline at end of file
Index: ../Lab07/app/src/main/res/drawable/ic_launcher_background.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/app/src/main/res/drawable/ic_launcher_background.xml b/../Lab07/app/src/main/res/drawable/ic_launcher_background.xml
new file mode 100644
--- /dev/null	(date 1697475332366)
+++ b/../Lab07/app/src/main/res/drawable/ic_launcher_background.xml	(date 1697475332366)
@@ -0,0 +1,170 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="108dp"
+    android:height="108dp"
+    android:viewportWidth="108"
+    android:viewportHeight="108">
+    <path
+        android:fillColor="#3DDC84"
+        android:pathData="M0,0h108v108h-108z" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M9,0L9,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,0L19,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M29,0L29,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M39,0L39,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M49,0L49,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M59,0L59,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M69,0L69,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M79,0L79,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M89,0L89,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M99,0L99,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,9L108,9"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,19L108,19"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,29L108,29"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,39L108,39"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,49L108,49"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,59L108,59"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,69L108,69"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,79L108,79"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,89L108,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,99L108,99"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,29L89,29"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,39L89,39"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,49L89,49"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,59L89,59"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,69L89,69"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,79L89,79"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M29,19L29,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M39,19L39,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M49,19L49,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M59,19L59,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M69,19L69,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M79,19L79,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+</vector>
Index: ../Lab07/app/src/main/res/layout/activity_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/app/src/main/res/layout/activity_main.xml b/../Lab07/app/src/main/res/layout/activity_main.xml
new file mode 100644
--- /dev/null	(date 1698943820714)
+++ b/../Lab07/app/src/main/res/layout/activity_main.xml	(date 1698943820714)
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".MainActivity">
+    <androidx.appcompat.widget.AppCompatButton
+        android:id="@+id/textView"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:onClick="update_greeting"
+        android:text="SWAP"
+        android:textColor="@color/white"
+        android:backgroundTint="@color/purple_700"
+        app:layout_constraintBottom_toBottomOf="@id/guideline"
+        app:layout_constraintLeft_toLeftOf="parent"
+        app:layout_constraintRight_toRightOf="parent" />
+    <FrameLayout
+        android:id="@+id/fragment_container"
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        app:layout_constraintBottom_toTopOf="@id/textView">
+    </FrameLayout>
+
+    <ImageView
+        android:id="@+id/imageView"
+        android:layout_width="310dp"
+        android:layout_height="342dp"
+        app:layout_constraintBottom_toTopOf="@+id/fragment_container"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintHorizontal_bias="0.495"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintVertical_bias="0.266"
+        app:srcCompat="@drawable/quizlet_logo" />
+
+    <androidx.constraintlayout.widget.Guideline
+        android:id="@+id/guideline"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        app:layout_constraintGuide_begin="600dp" />
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/com/example/lab09/Good.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/lab09/Good.java b/app/src/main/java/com/example/lab09/Good.java
new file mode 100644
--- /dev/null	(date 1705598528843)
+++ b/app/src/main/java/com/example/lab09/Good.java	(date 1705598528843)
@@ -0,0 +1,84 @@
+package com.example.lab09;
+
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.RadialGradient;
+import android.graphics.Rect;
+import android.graphics.RectF;
+import android.graphics.Shader;
+
+public class Good extends RectF {
+    private int dY, dX, radius, color;
+    private static final int BMP_COLUMNS = 4;
+    private static final int BMP_ROWS = 4;
+    private static final int DOWN=0, LEFT=1, RIGHT=2, UP=3;
+    private Bitmap bitmap;
+    private int currentFrame=0, iconWidth, iconHeight, animationDelay=10;
+
+    public Good(float left, float top, float right, float bottom, int dY, int dX, int color) {
+        super(left, top, right, bottom);
+        this.dY = dY;
+        this.dX = dX;
+        this.color = color;
+        radius=50;
+    }
+
+    public Good(int dY, int dX, int color) {
+        this(0,0,128,192,dX,dY,color);
+    }
+
+    public Good() {
+        this(0,0,Color.GRAY);
+    }
+
+    public void draw(Canvas canvas){
+        Paint paint = new Paint();
+        paint.setColor(color);
+        paint.setShader(new RadialGradient(centerX(),centerY(),radius,Color.GREEN,Color.WHITE, Shader.TileMode.MIRROR));
+
+        canvas.drawCircle(centerX(), centerY(), radius, paint);
+    }
+
+    public void update(Canvas canvas){
+        if((left+dX)<0||(right+dX)>canvas.getWidth())
+            dX*=-1;
+        if((top+dY)<250||(bottom+dY)>canvas.getHeight())
+            dY*=-1;
+        offset(dX,dY);
+        if(animationDelay--<0) {
+            currentFrame = ++currentFrame % BMP_COLUMNS;
+            animationDelay=10;
+        }
+    }
+
+    public int getdX() {
+        return dX;
+    }
+
+    public void setdX(int dX) {
+        this.dX = dX;
+    }
+
+    public int getdY() {
+        return dY;
+    }
+
+    public void setdY(int dY) {
+        this.dY = dY;
+    }
+
+    public int getColor() {
+        return color;
+    }
+
+    public void setColor(int color) {
+        this.color = color;
+    }
+
+    public void grow(int i) {
+        right=right+i;
+        bottom=bottom+i;
+    }
+}
\ No newline at end of file
Index: ../Lab07/app/src/main/java/com/example/lab07/FragmentB.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab07/app/src/main/java/com/example/lab07/FragmentB.java b/../Lab07/app/src/main/java/com/example/lab07/FragmentB.java
new file mode 100644
--- /dev/null	(date 1698943979530)
+++ b/../Lab07/app/src/main/java/com/example/lab07/FragmentB.java	(date 1698943979530)
@@ -0,0 +1,47 @@
+package com.example.lab07;
+
+
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.TextView;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.fragment.app.Fragment;
+
+public class FragmentB extends Fragment {
+    View view;
+
+    public static FragmentB newInstance(int someInt, String someTitle) {
+        FragmentB fragmentB = new FragmentB();
+        Bundle args = new Bundle();
+        args.putInt("int", someInt);
+        args.putString("title", someTitle);
+        fragmentB.setArguments(args);
+        return fragmentB;
+    }
+
+    @Nullable
+    @Override
+    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
+        return inflater.inflate(R.layout.fragment_blank, container,false);
+    }
+
+    @Override
+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
+        super.onViewCreated(view, savedInstanceState);
+        this.view = view;
+
+//        int i = getArguments().getInt("int", 0);
+        String t = getArguments().getString("title", "");
+
+        TextView textView = view.findViewById(R.id.b_textview);
+        textView.setText(t);
+//        Button button = view.findViewById(R.id.b_button);
+//        button.setText(getString(R.string.count, i));
+    }
+
+}
\ No newline at end of file
Index: ../Lab10/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Lab10/.idea/misc.xml b/../Lab10/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1704817137043)
+++ b/../Lab10/.idea/misc.xml	(date 1704817137043)
@@ -0,0 +1,9 @@
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="jbr-17" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/build/classes" />
+  </component>
+  <component name="ProjectType">
+    <option name="id" value="Android" />
+  </component>
+</project>
\ No newline at end of file
